
seed: 1234
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/CRNN/<seed>
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
data_folder: datasets/data
uppercase: True
open_rir_folder: !ref <data_folder> 
train_annotation: !ref <output_folder>/train.json
valid_annotation: !ref <output_folder>/dev.json
test_annotation: !ref <output_folder>/test.json
skip_prep: False

# Training parameters
number_of_epochs: 50
batch_size: 8
lr: 1.0
sorting: ascending 

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 40 

# Outputs
output_neurons: 40
blank_index: 0

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>

valid_dataloader_opts:
    batch_size: !ref <batch_size>

test_dataloader_opts:
    batch_size: !ref <batch_size>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    
augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

# Model parameters
kernel_size: 3
pool_kernal_size: 2
cnn_emb_channel1: 256
cnn_emb_channel2: 512
cnn_emb_channel2_pool: !ref <cnn_emb_channel2> // <pool_kernal_size>
cnn_emb_channel3: 512
cnn_emb_channel4: 1024
dropout: 0.5

# GRU
rnn_input_neurons: !ref <cnn_emb_channel4> // <pool_kernal_size>
rnn_neurons: 1024
num_direction: 2

conv1: !name:speechbrain.nnet.CNN.Conv1d
    out_channels: !ref <cnn_emb_channel1> 
    kernel_size: !ref <kernel_size>
    in_channels: !ref <n_mels>

conv2: !name:speechbrain.nnet.CNN.Conv1d
    out_channels: !ref <cnn_emb_channel2> 
    kernel_size: !ref <kernel_size>
    in_channels: !ref <cnn_emb_channel1>

# pooling: kernal_size = 2, in_channels: 1024 / 2 = 512
conv3: !name:speechbrain.nnet.CNN.Conv1d
    out_channels: !ref <cnn_emb_channel3>
    kernel_size: !ref <kernel_size>
    in_channels: !ref <cnn_emb_channel2_pool>

conv4: !name:speechbrain.nnet.CNN.Conv1d
    out_channels: !ref <cnn_emb_channel4>
    kernel_size: !ref <kernel_size>
    in_channels: !ref <cnn_emb_channel3>

custom_emb_module: !new:speechbrain.nnet.containers.Sequential
    input_shape: [null, null, !ref <n_mels>]
    conv1: !ref <conv1>
    activation1: !new:torch.nn.LeakyReLU
    conv2: !ref <conv2>
    activation2: !new:torch.nn.LeakyReLU
    maxpool1: !new:torch.nn.MaxPool1d
        kernel_size: !ref <pool_kernal_size>
    conv3: !ref <conv3>
    activation3: !new:torch.nn.LeakyReLU
    conv4: !ref <conv4>
    activation4: !new:torch.nn.LeakyReLU
    maxpool2: !new:torch.nn.MaxPool1d
        kernel_size: !ref <pool_kernal_size>
    # output_size = <cnn_emb_channel4> // 2 = 256

# pooling: kernal_size = 2, in_channels: 512 / 2 = 256
decoder: !new:speechbrain.nnet.RNN.GRU
    hidden_size: !ref <rnn_neurons>
    input_shape: [null, null, !ref <rnn_input_neurons>]
    dropout: 0.5
    bidirectional: True

batchnorm: !new:speechbrain.nnet.normalization.BatchNorm1d
    input_shape: [null, null, !ref <rnn_neurons> * <num_direction>]

linear1: !ref <rnn_neurons> * <num_direction> 
linear2: !ref <linear1> // 2
linear3: !ref <linear2> // 2

output1: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <linear1>
    n_neurons: !ref <linear2>
    bias: True

output2: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <linear2>
    n_neurons: !ref <linear3>
    bias: True

output3: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <linear3>
    n_neurons: !ref <output_neurons>
    bias: True

modules:
    model: !ref <custom_emb_module>
    normalize: !ref <normalize>
    rnn: !ref <decoder>
    batchnorm: !ref <batchnorm>
    dense1: !ref <output1>
    dense2: !ref <output2>
    dense3: !ref <output3>

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

opt_class: !name:torch.optim.Adadelta
    rho: 0.95
    lr: !ref <lr>
    eps: 1.e-8

lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.8
    patient: 0

compute_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

ctc_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.ctc_loss
        blank_index: !ref <blank_index>
        reduction: batch

per_stats: !name:speechbrain.utils.metric_stats.ErrorRateStats
